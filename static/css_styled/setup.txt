##
## @package TYPO3
## @subpackage tt_products
## @version $Id$
##

## Includes the productsLib:
includeLibs.tt_products = EXT:tt_products/pi1/class.tx_ttproducts_pi1.php

## This enables the tt_content.list item to display the product plugins:
plugin.tt_products >
plugin.tt_products = USER
plugin.tt_products {
  userFunc = tx_ttproducts_pi1->main
  templateFile = {$plugin.tt_products.file.templateFile}
  defaultSetup = 1
  templateStyle = css-styled
  pid_list = {$plugin.tt_products.pid_list}
  code.field = select_key
  defaultCode = HELP
  defaultImageDir = uploads/pics/
  wrapInBaseClass = 1


  limit = {$plugin.tt_products.limit}
  limitImage = {$plugin.tt_products.limitImage}
  limitImageSingle = {$plugin.tt_products.limitImageSingle}
  usePageContentImage = {$plugin.tt_products.usePageContentImage}
  separateImage = {$plugin.tt_products.separateImage}
  image {
    file.maxW = {$plugin.tt_products.maxW_single}
    file.maxH = {$plugin.tt_products.maxH_single}
    imageLinkWrap = {$plugin.tt_products.clickEnlarge}
    imageLinkWrap {
      enable = 1
      bodyTag = <body bgColor="black" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
      wrap = <a href="javascript:close();"> | </a>
      width = {$plugin.tt_products.maxW_popup}
      height =

      JSwindow = 1
      JSwindow.newWindow = 1
      JSwindow.expand = 0,0
    }
  }
  listImage < .image
  listImage.file.maxW = {$plugin.tt_products.maxW_list}
  listImage.file.maxH = {$plugin.tt_products.maxH_list}
  listImage.imageLinkWrap = {$plugin.tt_products.clickEnlarge_list}

  listImageHasChilds < .listImage
  listImageHasChilds.file.maxW = {$plugin.tt_products.maxW_listHasChilds}
  listImageHasChilds.file.maxH = {$plugin.tt_products.maxH_listHasChilds}
  listImageHasChilds.imageLinkWrap = {$plugin.tt_products.clickEnlarge_listHasChilds}

  listImageRoot < .listImage
  listImageRoot.file.maxW = {$plugin.tt_products.maxW_listRoot}
  listImageRoot.file.maxH = {$plugin.tt_products.maxH_listRoot}
  listImageRoot.imageLinkWrap = {$plugin.tt_products.clickEnlarge_listRoot}

  basketImage < .image
  basketImage.file.maxW = {$plugin.tt_products.maxW_basket}
  basketImage.file.maxH = {$plugin.tt_products.maxH_basket}
  basketImage.imageLinkWrap = {$plugin.tt_products.clickEnlarge_basket}

  listcatImage < .image
  listcatImage.file.maxW = {$plugin.tt_products.maxW_listcat}
  listcatImage.file.maxH = {$plugin.tt_products.maxH_listcat}
  listcatImage.imageLinkWrap = {$plugin.tt_products.clickEnlarge_listcat}

  image.wrap = | <br />

  noImageAvailable = {$plugin.tt_products.file.noImageAvailable}
  datasheetIcon {
	file = {$plugin.tt_products.file.datasheetIcon}
  }

  wrap1.wrap = {$plugin.tt_products.wrap1}
  wrap2.wrap = {$plugin.tt_products.wrap2}
  nl2brNote =  {$plugin.tt_products.nl2brNote}
  color1.wrap = {$plugin.tt_products.color1}
  color2.wrap = {$plugin.tt_products.color2}
  color3.wrap = {$plugin.tt_products.color3}

  selectColor = {$plugin.tt_products.selectColor}
  selectColor2 = {$plugin.tt_products.selectColor2}
  selectColor3 = {$plugin.tt_products.selectColor3}
  selectSize = {$plugin.tt_products.selectSize}
  selectSize2 = {$plugin.tt_products.selectSize2}
  selectSize3 = {$plugin.tt_products.selectSize3}
  selectDescription = {$plugin.tt_products.selectDescription}
  selectGradings = {$plugin.tt_products.selectGradings}
  selectMaterial = {$plugin.tt_products.selectMaterial}
  selectQuality = {$plugin.tt_products.selectQuality}
  useArticles = {$plugin.tt_products.useArticles}

  displayListCatHeader = {$plugin.tt_products.displayListCatHeader}
  displayBasketCatHeader = {$plugin.tt_products.displayBasketCatHeader}
  displayBasketColumns = {$plugin.tt_products.displayBasketColumns}
  displayCatListType = {$plugin.tt_products.displayCatListType}
  basketPic = {$plugin.tt_products.basketPic}
  clickIntoBasket = {$plugin.tt_products.clickIntoBasket}
  clickIntoList = {$plugin.tt_products.clickIntoList}
  clickIntoSubmenu = {$plugin.tt_products.clickIntoSubmenu}
  clickItemsIntoSubmenu = {$plugin.tt_products.clickItemsIntoSubmenu}
  basketMaxQuantity = {$plugin.tt_products.basketMaxQuantity}
  quantityIsFloat = {$plugin.tt_products.quantityIsFloat}

  CSS {
    file = EXT:tt_products/template/tt_products_example.css
    tt_products.LIST.row.even = {$plugin.tt_products.CSSRowEven}
    tt_products.LIST.row.uneven = {$plugin.tt_products.CSSRowUneven}
    tt_products.LIST.itemSingleWrap = <div class="###UNEVEN###">|</div>
    tt_products.LIST.itemRowWrap =
  }
  CSSListDefault = {$plugin.tt_products.CSSListDefault}
  CSSListCurrent = {$plugin.tt_products.CSSListCurrent}

  NoSingleViewOnList = {$plugin.tt_products.NoSingleViewOnList}
  listViewOnSearch = {$plugin.tt_products.listViewOnSearch}

  PIDagb = {$plugin.tt_products.PIDagb}
  PIDrevocation = {$plugin.tt_products.PIDrevocation}
  PIDinfo = {$plugin.tt_products.PIDinfo}
  PIDfinalize = {$plugin.tt_products.PIDfinalize}
  PIDpayment = {$plugin.tt_products.PIDpayment}
  PIDthanks = {$plugin.tt_products.PIDthanks}
  PIDtracking = {$plugin.tt_products.PIDtracking}
  PIDbilling = {$plugin.tt_products.PIDbilling}
  PIDdelivery = {$plugin.tt_products.PIDdelivery}
  PIDitemDisplay = {$plugin.tt_products.PIDitemDisplay}
  PIDlistDisplay = {$plugin.tt_products.PIDlistDisplay}
  PIDsearch = {$plugin.tt_products.PIDsearch}
  PIDbasket = {$plugin.tt_products.PIDbasket}
  PIDstoreRoot = {$plugin.tt_products.PIDstoreRoot}
  PIDmemo = {$plugin.tt_products.PIDmemo}
  PID_sys_products_orders = {$plugin.tt_products.PID_sys_products_orders}
  PIDGiftsTable = {$plugin.tt_products.PIDGiftsTable}
  paymentActivity = {$plugin.tt_products.paymentActivity}

  advanceOrderNumberWithInteger = {$plugin.tt_products.advanceOrderNumberWithInteger}
  alwaysAdvanceOrderNumber = {$plugin.tt_products.alwaysAdvanceOrderNumber}
  alwaysUpdateOrderAmount = {$plugin.tt_products.alwaysUpdateOrderAmount}

  defaultArticleID = {$plugin.tt_products.defaultArticleID}
  defaultProductID = {$plugin.tt_products.defaultProductID}
  defaultCategoryID = {$plugin.tt_products.defaultCategoryID}
  defaultDAMCategoryID = {$plugin.tt_products.defaultDAMCategoryID}

  rootCategoryID = {$plugin.tt_products.rootCategoryID}
  rootDAMCategoryID = {$plugin.tt_products.rootDAMCategoryID}
  rootPageID = {$plugin.tt_products.rootPageID}
  recursive = {$plugin.tt_products.recursive}
  domain = {$plugin.tt_products.domain}

  parseFunc < styles.content.parseFunc
  categoryHeader = TEXT
  categoryHeader.current = 1

  priceDec = {$plugin.tt_products.priceDec}
  priceDecPoint = {$plugin.tt_products.priceDecPoint}
  priceThousandPoint = {$plugin.tt_products.priceThousandPoint}
  percentDec = {$plugin.tt_products.percentDec}
  currencySymbol = {$plugin.tt_products.currencySymbol}

  TAXpercentage = {$plugin.tt_products.TAXpercentage}
  TAXincluded = {$plugin.tt_products.TAXincluded}
  TAXmode = {$plugin.tt_products.TAXmode}
  TAXrates = {$plugin.tt_products.TAXrates}

  lockLoginUserInfo = {$plugin.tt_products.lockLoginUserInfo}
  editLockedLoginInfo = {$plugin.tt_products.editLockedLoginInfo}
  loginUserInfoAddress = {$plugin.tt_products.loginUserInfoAddress}
  orderByItemNumberSg = {$plugin.tt_products.orderByItemNumberSg}
  orderNumberPrefix = {$plugin.tt_products.orderNumberPrefix}
  requiredInfoFields = name, address, telephone, email
  orderEmail_from = {$plugin.tt_products.orderEmail_from}
  orderEmail_fromName = {$plugin.tt_products.orderEmail_fromName}
  orderEmail_to = {$plugin.tt_products.orderEmail_to}
  orderEmail_toDelivery = {$plugin.tt_products.orderEmail_toDelivery}
  orderEmail_subject = {$plugin.tt_products.orderEmail_subject}
  orderEmail_htmlmail = {$plugin.tt_products.orderEmail_htmlmail}
  orderEmail_apostrophe = {$plugin.tt_products.orderEmail_apostrophe}
  orderEmail_order2 = {$plugin.tt_products.orderEmail_order2}
  email_notify_default = {$plugin.tt_products.email_notify_default}
  statusCodes {
# 1: Incoming orders
    1 = Order submitted by user
# 2-49: Useable by the shop admin
    2 = Order is received and accepted by store
    10 = Shop is awaiting goods from third-party
    11 = Shop is awaiting customer payment
    12 = Shop is awaiting material from customer
    13 = Order has been paid
    20 = Goods shipped to customer
    21 = Gift certificates shipped to customer
    30 = Other message from store
# 50-99: Useable by the customer
# 50-59: General user messages
    50 = Customer request for cancelling
    51 = Message from customer to shop
# 60-69: Special user messages
    60 = Send gift certificate message to receiver
# 100-299 : Order finalized.
    100 = Order shipped and closed
    101 = Order closed
    200 = Order cancelled
  }
  update_code = {$plugin.tt_products.update_code}
  statusDate_stdWrap.strftime= %d-%m-%Y %H:%M
  orderDate_stdWrap.strftime = %d-%m-%Y
  usebyDate_stdWrap.strftime = %d-%m-%Y

  usePriceTag = {$plugin.tt_products.usePriceTag}
  useStaticInfoCountry = {$plugin.tt_products.useStaticInfoCountry}

  priceTagObj = IMAGE
  priceTagObj.wrap = |
  priceTagObj.file = GIFBUILDER
  priceTagObj.file {
    backColor = #C4C400
    XY = [10.w]+10,[10.h]+5
    10 = TEXT
    10 {
      text = ###PRICE###
      offset = 0,14
      fontColor = #222222
      fontSize = 16
      align = center
      niceText = 1
    }
  }

  max_note_length = {$plugin.tt_products.max_note_length}

  bulkilyWarning = {$plugin.tt_products.bulkilyWarning}
  bulkilyAddition = {$plugin.tt_products.bulkilyAddition}
  bulkilyFeeTax = {$plugin.tt_products.bulkilyFeeTax}
  specialPreparation = {$plugin.tt_products.specialPreparation}

  createUsers = {$plugin.tt_products.createUsers}
  PIDuserFolder = {$plugin.tt_products.PIDuserFolder}
  pidsRelatedProducts = {$plugin.tt_products.pidsRelatedProducts}
  pidsAddresses = {$plugin.tt_products.pidsAddresses}
  outputFolder = {$plugin.tt_products.outputFolder}
  memberOfGroup = {$plugin.tt_products.memberOfGroup}
  discountGroupName = {$plugin.tt_products.discountGroupName}
  getDiscountPrice = {$plugin.tt_products.getDiscountPrice}

  stdSearchFieldExt = {$plugin.tt_products.stdSearchFieldExt}
  AGBtarget = {$plugin.tt_products.AGBtarget}
  AGBattachment = {$plugin.tt_products.AGBattachment}

  generateCSV = {$plugin.tt_products.generateCSV}
  CSVdestination = {$plugin.tt_products.CSVdestination}
  CSVfields = {$plugin.tt_products.CSVfields}
  CSVinOneLine = {$plugin.tt_products.CSVinOneLine}

  alwaysInStock  = {$plugin.tt_products.alwaysInStock}
  showNotinStock = {$plugin.tt_products.showNotinStock}
  notInStockMessage = {$plugin.tt_products.notInStockMessage}
  inStockPieces = {$plugin.tt_products.inStockPieces}
  warningInStockLimit = {$plugin.tt_products.warningInStockLimit}
  newItemDays = {$plugin.tt_products.newItemDays}
  substitutePagetitle = {$plugin.tt_products.substitutePagetitle}

  whereGift = {$plugin.tt_products.whereGift}
  whereGiftService = {$plugin.tt_products.whereGiftService}

  form.SEARCH.name = ShopSearchForm

  basket.store = 1

  memo.allow = fe_users,session

  # table settings
  # attention: Do not change the tt_products fields if you don't know what you do
  table.address = fe_users

#  table.address = tx_party_addresses
#  table.address {
#    name = last_name
#  }

  table.tt_products = tt_products
  table.tt_products {
    address = address
    itemnumber = itemnumber
    inStock = inStock
    variant {
      1 = color
      2 = size
      3 = description
      4 = gradings
      5 = additional
      6 = color2
      7 = color3
      8 = size2
      9 = size3
      10 = material
      11 = quality
    }
  }

  conf.tt_products.ALL {
    orderBy = title
    requiredFields = uid,pid,category,price,price2,directcost,graduated_price_uid,tax,inStock,datasheet,unit_factor,weight
    language.type = table
    language.table = tt_products_language
    functions {
       htmlentities = title, subtitle, itemnumber
    }
    controlFields {
      newItemDays = crdate, starttime
    }
	field {
	  weight = TEXT
	  weight {
		preUserFunc = tx_div2007_alpha->phpFunc
		preUserFunc {
			php = round($value,2);
		}
	  }
	}
  }

  conf.tt_products.LIST {
	field {
		note = TEXT
		note.crop = {$plugin.tt_products.max_note_length} | ...
	}
  }

  table.tt_products_articles = tt_products_articles
  table.tt_products_articles {
    itemnumber = itemnumber
    inStock = inStock
    uid_product = uid_product
    variant {
      1 = color
      2 = size
      3 = description
      4 = gradings
      5 = additional
      6 = color2
      7 = color3
      8 = size2
      9 = size3
      10 = material
      11 = quality
    }
  }

  conf.tt_products_articles.ALL {
    requiredFields = uid,pid,uid_product,price,price2,inStock
  }

  table.tt_products_cat = tt_products_cat
  conf.tt_products_cat.ALL {
    onlyChildsOfCurrent = 1
    language.type = table
    language.table = tt_products_cat_language
    orderBy = sorting
  }

  table.tt_products_graduated_price = tt_products_graduated_price
  conf.tt_products_graduated_price.ALL {
    language.type = noTranslation
  }

  table.tt_products_mm_graduated_price = tt_products_mm_graduated_price
  conf.tt_products_mm_graduated_price.ALL {
    language.type = noTranslation
  }

  table.tt_products_texts = tt_products_texts
  conf.tt_products_texts.ALL {
    onlyChildsOfCurrent = 1
    language.type = table
    language.table = tt_products_texts_language
    orderBy = sorting
  }

  conf.pages.ALL {
     requiredFields = uid,pid,title,subtitle,media
     language.type = table
     language.table = pages_language_overlay
  }

  table.tx_dam = tx_dam
  conf.tx_dam.ALL {
     language.type = noTranslation
     orderBy = sorting
  }

  table.tx_dam_cat = tx_dam_cat
  conf.tx_dam_cat.ALL {
     onlyChildsOfCurrent = 1
     language.type = noTranslation
     orderBy = sorting
  }

  debug = {$plugin.tt_products.debug}
  ajaxDebug = {$plugin.tt_products.ajaxDebug}
  delivery	{
  	0.image < .image
  	0.image {
  	file = EXT:tt_products/res/icons/fe/availableDemand.gif
  	file.maxW = {$plugin.tt_products.maxW_single}
    }
  	1.image < plugin.tt_products.delivery.0.image
  	1.image {
  	file = EXT:tt_products/res/icons/fe/availableImmediate.gif
    }
  	2.image < plugin.tt_products.delivery.0.image
  	2.image {
  	file = EXT:tt_products/res/icons/fe/availableShort.gif
    }
  }

  _CSS_DEFAULT_STYLE (
      .tx-ttproducts-pi1-wrap1 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; color: #000; }
      .tx-ttproducts-pi1-wrap2 {font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10px; color: #000; }
  )

  marks {
   BASKET_MINI_HEADER = Warenkorb
   BASKET_INTO = in den Warenkorb
   BASKET_INTO_ID = basketInto
  }

  shopAdmin = BE
  control.ALL.param {
    use = backPID
  }

  orderEmail {
       10000.suffix = shop
       10000.from = customer
       10002.suffix = customer
       10002.from = shop
  }

}

[globalVar = GP:ttp_basket != '']
plugin.tt_products = USER_INT
[global]

[globalVar = GP:tt_products|sword != '']
plugin.tt_products = USER_INT
[global]


## This enables the record item to display product items
tt_products >
tt_products = < plugin.tt_products
tt_products.defaultCode = SINGLE
tt_products.displayCurrentRecord = 1


###EXAMPLES

#plugin.tt_products {
#	CMD =
#	pidList =
#	recursive =
#}

  # Example of default set CSS styles (these go into the document header):
#plugin.tt_products._CSS_DEFAULT_STYLE (
#  .tx-ttproducts-pi1 H2 { margin-top: 0px; margin-bottom: 0px; }
#)
  # Example of how to overrule LOCAL_LANG values for the plugin:
#plugin.tt_products._LOCAL_LANG.default {
#  pi_list_searchBox_search = Search!
#}

  # Example of how to set default values from TS in the incoming array, $this->piVars of the plugin:
#plugin.tt_products._DEFAULT_PI_VARS.test = 15


